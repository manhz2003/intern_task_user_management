/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.nsw.nghiepvu.noticeandmessage.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import com.fds.nsw.kernel.exception.PortalException;
import com.fds.nsw.kernel.exception.SystemException;
import com.fds.nsw.nghiepvu.model.Modify;
import com.fds.nsw.nghiepvu.noticeandmessage.service.persistence.ModifyPersistenceImpl;
import org.springframework.stereotype.Service;

/**
 * The base implementation of the modify local service.
 *
 * <p>
 * This implementation exists only as a container for the default service
 * methods generated by ServiceBuilder. All custom service methods should be put
 * in {@link vn.gt.dao.noticeandmessage.service.impl.ModifyLocalServiceImpl}.
 * </p>
 *
 * @author win_64
 * @see vn.gt.dao.noticeandmessage.service.impl.ModifyLocalServiceImpl
 * @see vn.gt.dao.noticeandmessage.service.ModifyLocalServiceUtil
 * @generated
 */
@Service
public class ModifyLocalServiceImpl {
	@Autowired
	ModifyPersistenceImpl persistence;

	public Modify addModify(Modify modify) throws SystemException {

		modify = persistence.updateImpl(modify, false);

		return modify;
	}

	/**
	 * Creates a new modify with the primary key. Does not add the modify to the
	 * database.
	 *
	 * @param id the primary key for the new modify
	 * @return the new modify
	 */
	public Modify createModify(long id) {
		return persistence.create(id);
	}

	/**
	 * Deletes the modify with the primary key from the database. Also notifies the
	 * appropriate model listeners.
	 *
	 * @param id the primary key of the modify
	 * @throws PortalException if a modify with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public void deleteModify(long id) throws PortalException, SystemException {
		Modify modify = persistence.remove(id);

	}

	/**
	 * Deletes the modify from the database. Also notifies the appropriate model
	 * listeners.
	 *
	 * @param modify the modify
	 * @throws SystemException if a system exception occurred
	 */
	public void deleteModify(Modify modify) throws SystemException {
		persistence.remove(modify);

	}

	public Modify fetchModify(long id) throws SystemException {
		return persistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the modify with the primary key.
	 *
	 * @param id the primary key of the modify
	 * @return the modify
	 * @throws PortalException if a modify with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public Modify getModify(long id) throws PortalException, SystemException {
		return persistence.findByPrimaryKey(id);
	}

	/**
	 * Returns a range of all the modifies.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code>
	 * instances. <code>start</code> and <code>end</code> are not primary keys, they
	 * are indexes in the result set. Thus, <code>0</code> refers to the first
	 * result in the set. Setting both <code>start</code> and <code>end</code> to
	 *  will return the
	 * full result set.
	 * </p>
	 *
	 * @param start the lower bound of the range of modifies
	 * @param end   the upper bound of the range of modifies (not inclusive)
	 * @return the range of modifies
	 * @throws SystemException if a system exception occurred
	 */
	public List<Modify> getModifies(int start, int end) throws SystemException {
		return persistence.findAll(start, end);
	}

	/**
	 * Returns the number of modifies.
	 *
	 * @return the number of modifies
	 * @throws SystemException if a system exception occurred
	 */
	public int getModifiesCount() throws SystemException {
		return persistence.countAll();
	}

	/**
	 * Updates the modify in the database or adds it if it does not yet exist. Also
	 * notifies the appropriate model listeners.
	 *
	 * @param modify the modify
	 * @return the modify that was updated
	 * @throws SystemException if a system exception occurred
	 */
	public Modify updateModify(Modify modify) throws SystemException {
		return updateModify(modify, true);
	}

	/**
	 * Updates the modify in the database or adds it if it does not yet exist. Also
	 * notifies the appropriate model listeners.
	 *
	 * @param modify the modify
	 * @param merge  whether to merge the modify with the current session. See
	 *               
	 *               for an explanation.
	 * @return the modify that was updated
	 * @throws SystemException if a system exception occurred
	 */
	public Modify updateModify(Modify modify, boolean merge) throws SystemException {

		modify = persistence.updateImpl(modify, merge);

		return modify;
	}

}