/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.fds.nsw.nghiepvu.common.service.impl;import java.util.ArrayList; import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;import com.fds.nsw.kernel.exception.PortalException;import org.springframework.stereotype.Service;

import com.fds.nsw.nghiepvu.common.service.persistence.LogMessageValidationPersistenceImpl;
import com.fds.nsw.nghiepvu.model.*;
import com.fds.nsw.nghiepvu.service.exception.*;
import com.fds.nsw.kernel.exception.SystemException;

import org.springframework.beans.factory.annotation.Autowired;import lombok.extern.slf4j.Slf4j;@Slf4j @Service






/**
 * The implementation of the log message validation local service.
 *
 * <p>
 * All custom service methods should be put in this class. Whenever methods are added, rerun ServiceBuilder to copy their definitions into the {@link vn.gt.dao.common.service.LogMessageValidationLocalService} interface.
 *
 * <p>
 * This is a local service. Methods of this service will not have security checks based on the propagated JAAS credentials because this service can only be accessed from within the same VM.
 * </p>
 *
 * @author win_64
 * @see vn.gt.dao.common.service.base.LogMessageValidationLocalServiceBaseImpl
 * @see vn.gt.dao.common.service.logMessageValidationLocalService
 */
public class LogMessageValidationLocalServiceImpl
	{ @Autowired
	LogMessageValidationPersistenceImpl persistence;
	
	public java.util.List<LogMessageValidation> findByDocumentNameDocumentYear(long documentName, int documentYear){
		try{
			
			return persistence.findByDocumentNameDocumentYear(documentName, documentYear);
		}catch (Exception e) {
		}
		return new ArrayList<LogMessageValidation>();
	}
		/**
		 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
		 *
		 * This library is free software; you can redistribute it and/or modify it under
		 * the terms of the GNU Lesser General Public License as published by the Free
		 * Software Foundation; either version 2.1 of the License, or (at your option)
		 * any later version.
		 *
		 * This library is distributed in the hope that it will be useful, but WITHOUT
		 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
		 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
		 * details.
		 */


		/**
		 * The base implementation of the log message validation local service.
		 *
		 * <p>
		 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link vn.gt.dao.common.service.impl.LogMessageValidationLocalServiceImpl}.
		 * </p>
		 *
		 * @author win_64
		 * @see vn.gt.dao.common.service.impl.LogMessageValidationLocalServiceImpl
		 * @see vn.gt.dao.common.service.logMessageValidationLocalService
		 * @generated
		 */

			/*
			 * NOTE FOR DEVELOPERS:
			 *
			 * Never modify or reference this class directly. Always use {@link vn.gt.dao.common.service.logMessageValidationLocalService} to access the log message validation local service.
			 */

			/**
			 * Adds the log message validation to the database. Also notifies the appropriate model listeners.
			 *
			 * @param logMessageValidation the log message validation
			 * @return the log message validation that was added
			 * @throws SystemException if a system exception occurred
			 */
			public LogMessageValidation addLogMessageValidation(
					LogMessageValidation logMessageValidation) throws SystemException {

				logMessageValidation = persistence.updateImpl(logMessageValidation,
						false);



				return logMessageValidation;
			}

			/**
			 * Creates a new log message validation with the primary key. Does not add the log message validation to the database.
			 *
			 * @param id the primary key for the new log message validation
			 * @return the new log message validation
			 */
			public LogMessageValidation createLogMessageValidation(long id) {
				return persistence.create(id);
			}

			/**
			 * Deletes the log message validation with the primary key from the database. Also notifies the appropriate model listeners.
			 *
			 * @param id the primary key of the log message validation
			 * @throws PortalException if a log message validation with the primary key could not be found
			 * @throws SystemException if a system exception occurred
			 */
			public void deleteLogMessageValidation(long id)
					throws PortalException, SystemException {
				LogMessageValidation logMessageValidation = persistence.remove(id);

			}

			/**
			 * Deletes the log message validation from the database. Also notifies the appropriate model listeners.
			 *
			 * @param logMessageValidation the log message validation
			 * @throws SystemException if a system exception occurred
			 */
			public void deleteLogMessageValidation(
					LogMessageValidation logMessageValidation) throws SystemException {
				persistence.remove(logMessageValidation);
			}










			public LogMessageValidation fetchLogMessageValidation(long id)
					throws SystemException {
				return persistence.fetchByPrimaryKey(id);
			}

			/**
			 * Returns the log message validation with the primary key.
			 *
			 * @param id the primary key of the log message validation
			 * @return the log message validation
			 * @throws PortalException if a log message validation with the primary key could not be found
			 * @throws SystemException if a system exception occurred
			 */
			public LogMessageValidation getLogMessageValidation(long id)
					throws PortalException, SystemException {
				return persistence.findByPrimaryKey(id);
			}


			/**
			 * Returns a range of all the log message validations.
			 *
			 * <p>
			 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to  will return the full result set.
			 * </p>
			 *
			 * @param start the lower bound of the range of log message validations
			 * @param end the upper bound of the range of log message validations (not inclusive)
			 * @return the range of log message validations
			 * @throws SystemException if a system exception occurred
			 */
			public List<LogMessageValidation> getLogMessageValidations(int start,
																	   int end) throws SystemException {
				return persistence.findAll(start, end);
			}

			/**
			 * Returns the number of log message validations.
			 *
			 * @return the number of log message validations
			 * @throws SystemException if a system exception occurred
			 */
			public int getLogMessageValidationsCount() throws SystemException {
				return persistence.countAll();
			}

			/**
			 * Updates the log message validation in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
			 *
			 * @param logMessageValidation the log message validation
			 * @return the log message validation that was updated
			 * @throws SystemException if a system exception occurred
			 */
			public LogMessageValidation updateLogMessageValidation(
					LogMessageValidation logMessageValidation) throws SystemException {
				return updateLogMessageValidation(logMessageValidation, true);
			}

			/**
			 * Updates the log message validation in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
			 *
			 * @param logMessageValidation the log message validation
			 * @param merge whether to merge the log message validation with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.fds.nsw.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
			 * @return the log message validation that was updated
			 * @throws SystemException if a system exception occurred
			 */
			public LogMessageValidation updateLogMessageValidation(
					LogMessageValidation logMessageValidation, boolean merge)
					throws SystemException {

				logMessageValidation = persistence.updateImpl(logMessageValidation,
						merge);





				return logMessageValidation;
			}
}